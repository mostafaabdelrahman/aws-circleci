version: 2.1

jobs:

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Create CloudFormation Bucket"
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name "bucket-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides NAME="bucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://"bucket-${CIRCLE_WORKFLOW_ID:0:7}" --delete

            
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: "Query CloudFormation Deployment ID"
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > /tmp/deployment_id.txt
            cat /tmp/deployment_id.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - deployment_id.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Promote to Production"
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="bucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: /tmp
      - run:
          name: "Cleanup Old Frontend"
          command: |
            export OldPipelineID=`cat /tmp/deployment_id.txt`
            aws s3 rm "s3://${OldPipelineID}" --recursive
            aws cloudformation delete-stack --stack-name "${OldPipelineID}"


  # Start rollback exercise
# commands:
#   destroy_environments:
#     steps:
#       - run:
#           name: "Delete CloudFormation Stack"
#           command: |
#             aws cloudformation delete-stack --stack-name myfirsttest
#           when: on_fail

# jobs:
#   create_infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: "Create CloudFormation Stack"
#           command: |
#             aws cloudformation create-stack --stack-name myfirsttest --template-body file://stack.yml
#       - run:
#           name: "Sleep between create and delete stack"
#           command: |
#             sleep 120
#       - run:
#           name: "Simulate Error"
#           command: |
#             return 1
#             #echo Ok
#       - destroy_environments
  # end of rollback exercise 


  # Cloudformation to create stack
  # run-cloudformation:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Create CloudFormation Stack"
  #         command: |
  #           aws cloudformation create-stack --stack-name myfirsttest --template-body file://stack.yml
  
  # configure infra using ansible
  # configure-environment:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   # add env var for ssh key checking bypass
  #   environment:
  #     ANSIBLE_HOST_KEY_CHECKING: False
  #   steps:
  #   - checkout
  #   - add_ssh_keys:
  #       fingerprints: ["4f:66:70:dc:47:8d:20:bf:ed:b3:1e:a2:1c:92:9d:bd"]
  #   - run:
  #       name: "Install Ansible using apk"
  #       command: |
  #         apk add --update ansible
  #   - run:
  #       name: "Configure Node.js on new ubuntu server"
  #       command: |
  #         ansible-playbook main-remote.yml -i inventory

workflows:
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      #- run-cloudformation
      # - configure-environment
      # - create_infrastructure
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - clean_up_old_front_end:
          requires: [get_last_deployment_id,promote_to_production]        